# -*- coding: utf-8 -*-
"""Transpiler un modèle en C : régression linéaire.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JarGW52uKNCpQVEZVMOd5LgI-t9PPyST

# Imports
"""

import pandas as pd
import joblib
import os
from sklearn.linear_model import LinearRegression

"""# Chargement du dataset et du modèle"""

# Chargement du dataset
df = pd.read_csv("tumors.csv")
print(df.head())

X = df[["size", "p53_concentration"]]
y = df["is_cancerous"]


# Séparation du dataset en training et testing sets
X_train = X[:-10]
X_test = X[-10:]

y_train = y[:-10]
y_test = y[-10:]

# Chargement du model
model = LinearRegression()

model.fit(X_train, y_train)

# Sauvegarde du model
joblib.dump(model, f"model.joblib")

def produce_linear_regression_c_code():

    model = joblib.load('model.joblib')

    # Thetas
    n_thetas = len(model.coef_) + 1
    thetas = f"{model.intercept_}f,"
    for coef in model.coef_:
        thetas += str(coef) + "f,"
    thetas = thetas.strip(",")

    prediction_code = f"float thetas[{n_thetas}] = {{{thetas}}};"

    # Features
    features=""
    for i in range(X_test.shape[0]):
      to_predict = X_test.iloc[i].tolist()
      feature = "{"
      for value in to_predict:
          feature += str(value) + "f,"
      features += feature[:-2]
      features += "},\n"
    
    n_sample = X_test.shape[0]
    n_feature = X_test.shape[1]

    # Code
    code = f"""
    #include <stdio.h>

    {prediction_code}
    float prediction(float *features, int n_feature)
    {{
        float res = thetas[0];

        for (int i = 0; i < n_feature; ++i)
            res += features[i] * thetas[i+1];

        return res;
    }}
    int main()
    {{
        float features[{n_sample}][{n_feature}] = {{{features}}};

        for (int i = 0; i < {n_sample}; ++i) {{
            printf("%f\\n", prediction(features[i], 2));
        }}

        return 0;
    }}
    """


    with open("transpiler.c", "w") as f:
        f.write(code)

produce_linear_regression_c_code()

!gcc transpiler.c -O3 -o transpiler

print("Modèle transpilé:")
!./transpiler

print('Modèle non-transpilé:')
for i in model.predict(X_test):
  print(i)

"""Les prédictions produites par le modèle transpilé sont bien conformes."""